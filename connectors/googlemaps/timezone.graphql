extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.11"
    import: ["@key", "@shareable", "@external", "@requires"]
  ) # Enable this schema to use Apollo Federation features
  @link( # Enable this schema to use Apollo Connectors
    url: "https://specs.apollo.dev/connect/v0.2"
    import: ["@connect", "@source"]
  )
    @source(
        name: "timezone"
        http: { baseURL: "https://maps.googleapis.com/maps/api/timezone/" }
    )

type Query {
  # Optional fallback query
  timezoneByCoords(lat: Float!, lng: Float!, timestamp: Int!): TimezoneInfo
    @connect(
      source: "timezone"
      http: {
        GET: "json?location={$args.lat},{$args.lng}&timestamp={$args.timestamp}&key=YOUR_API_KEY"
      }
      selection: """
        timeZoneId
        timeZoneName
        rawOffset
        dstOffset
      """
    )
}

type TimezoneInfo {
  timeZoneId: String
  timeZoneName: String
  rawOffset: Int
  dstOffset: Int
}

extend type Place @key(fields: "placeId", resolvable: false) {
  placeId: String @external
  geometry: Geometry @external
  timezone(timestamp: Int!): TimezoneInfo
   @requires(fields: "geometry { location { lat lng } }")
    @connect(
      source: "timezone"
      http: {
        GET: "json?location={$this.geometry.location.lat},{$this.geometry.location.lng}&timestamp={$args.timestamp}&key=YOUR_API_KEY"
      }
      selection: """
        timeZoneId
        timeZoneName
        rawOffset
        dstOffset
      """
    )
}

type Geometry {
  location: Location @external
}

type Location {
  lat: Float @external
  lng: Float @external
}
